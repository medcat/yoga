Productions:
   0 $start: main $                                                           
   1 main: expression                                                         { |_| compile_paren(_) }
   2 expression: group                                                        { |_|    [_]           }
   3 expression: group expression                                             { |a, b| b.unshift(a)  }
   4 group: group modifier                                                    { |a, b|    compile_modifier(b, a)     }
   5 group: group binop group                                                 { |a, b, c| compile_binop(b, a, c)     }
   6 group: group transitional                                                { |a, b|    compile_transitional(b, a) }
   7 group: value                                                             
   8 modifier: "*"                                                            { |_| _[0] }
   9 modifier: "+"                                                            { |_| _[0] }
  10 modifier: "?"                                                            { |_| _[0] }
  11 modifier: "{" NUMBER "}"                                                 
  12 modifier: "{" "," NUMBER "}"                                             
  13 modifier: "{" NUMBER "," "}"                                             
  14 modifier: "{" NUMBER "," NUMBER "}"                                      
  15 binop: "|"                                                               { |_| _[0] }
  16 binop: "&"                                                               { |_| _[0] }
  17 binop: "--"                                                              { |_| _[0] }
  18 binop: "-"                                                               { |_| _[0] }
  19 transitional: ":" transitional.type transitional.on chars "<" NUMBER ">" { |_, a, b, c,_, d, _| [a[0], b[0], c, d[1]]   }
  20 transitional: ":" transitional.type transitional.on "<" NUMBER ">"       { |_, a, b, _, c, _|   [a[0], b[0], "", c[1]]  }
  21 transitional.type: ">"                                                   
  22 transitional.type: "<"                                                   
  23 transitional.on: "$"                                                     
  24 transitional.on: "%"                                                     
  25 transitional.on: "@"                                                     
  26 value: "(" expression ")"                                                { |_, a, _| compile_paren(a)      }
  27 value: STRING                                                            { |_|       compile_string(_)     }
  28 value: contain                                                           { |_|       compile_contain(_)    }
  29 value: NUMBER                                                            { |_|       compile_number(_)     }
  30 value: identifier                                                        { |_|       compile_identifier(_) }
  31 contain: "[" contain.body "]"                                            { |_, a, _| a }
  32 identifier: CHARACTER chars                                              { |a, b| b.unshift(a)             }
  33 chars: char                                                              { |_|    [_]                      }
  34 chars: char chars                                                        { |a, b| b.unshift(a)             }
  35 char: CHARACTER                                                          
  36 char: NUMBER                                                             
  37 char: "-"                                                                
  38 contain.body: "^" contain.parts                                          { |a, b| b.unshift(a) }
  39 contain.body: contain.parts                                              
  40 contain.parts: contain.part                                              { |_|    [_]          }
  41 contain.parts: contain.part contain.parts                                { |a, b| b.unshift(a) }
  42 contain.part: contain.char                                               
  43 contain.part: contain.char "-" contain.char                              { |a, b, c| [:SET, a[1], c[1]] }
  44 contain.part: "-"                                                        
  45 contain.char: CHARACTER                                                  
  46 contain.char: NUMBER                                                     
  47 contain.char: ESCAPED                                                    


Precedence:
  --- highest
  nonassoc 7:
    {COLON}
  left     6:
    {UNION, INTERSECT, SDIFFERENCE, DIFFERENCE}
  right    5:
    {CHARACTER, NUMBER}
  left     4:
    {STAR, PLUS, OPTIONAL}
  nonassoc 3:
    {LBRACE, RBRACE}
  nonassoc 2:
    {LPAREN, RPAREN}
  nonassoc 1:
    {_}
  nonassoc 0:
    {$}
  --- lowest

  State 0:
    0/n0: $start →  • main $
      {}
    1/n1: main →  • expression
      {}
    2/n1: expression →  • group
      {}
    3/n1: expression →  • group expression
      {}
    4/n1: group →  • group modifier
      {}
    5/n1: group →  • group binop group
      {}
    6/n1: group →  • group transitional
      {}
    7/n1: group →  • value
      {}
    8/n2: value →  • "(" expression ")"
      {}
    9/n1: value →  • STRING
      {}
    10/n1: value →  • contain
      {}
    11/r5: value →  • NUMBER
      {}
    12/n1: value →  • identifier
      {}
    13/n1: contain →  • "[" contain.body "]"
      {}
    14/r5: identifier →  • CHARACTER chars
      {}
    transitions:
      main: State 1
      expression: State 2
      group: State 3
      value: State 4
      "(": State 5
      STRING: State 6
      contain: State 7
      NUMBER: State 8
      identifier: State 9
      "[": State 10
      CHARACTER: State 11

  State 1:
    15/n0: $start → main • $
      {}
    transitions:
      $: State 12

  State 2:
    16/n1: main → expression • 
      {$}
    reductions:
      $: Rule 1

  State 3:
    17/n1: expression → group • 
      {$, ")"}
    18/n1: expression → group • expression
      {}
    19/n1: expression →  • group
      {}
    20/n1: expression →  • group expression
      {}
    21/n1: group →  • group modifier
      {}
    22/n1: group →  • group binop group
      {}
    23/n1: group →  • group transitional
      {}
    24/n1: group →  • value
      {}
    25/n2: value →  • "(" expression ")"
      {}
    26/n1: value →  • STRING
      {}
    27/n1: value →  • contain
      {}
    28/r5: value →  • NUMBER
      {}
    29/n1: value →  • identifier
      {}
    30/n1: contain →  • "[" contain.body "]"
      {}
    31/r5: identifier →  • CHARACTER chars
      {}
    32/n1: group → group • modifier
      {}
    33/l4: modifier →  • "*"
      {}
    34/l4: modifier →  • "+"
      {}
    35/l4: modifier →  • "?"
      {}
    36/n3: modifier →  • "{" NUMBER "}"
      {}
    37/n3: modifier →  • "{" "," NUMBER "}"
      {}
    38/n3: modifier →  • "{" NUMBER "," "}"
      {}
    39/n3: modifier →  • "{" NUMBER "," NUMBER "}"
      {}
    40/n1: group → group • binop group
      {}
    41/l6: binop →  • "|"
      {}
    42/l6: binop →  • "&"
      {}
    43/l6: binop →  • "--"
      {}
    44/l6: binop →  • "-"
      {}
    45/n1: group → group • transitional
      {}
    46/n1: transitional →  • ":" transitional.type transitional.on chars "<" NUMBER ">"
      {}
    47/n1: transitional →  • ":" transitional.type transitional.on "<" NUMBER ">"
      {}
    transitions:
      expression: State 13
      group: State 3
      value: State 4
      "(": State 5
      STRING: State 6
      contain: State 7
      NUMBER: State 8
      identifier: State 9
      "[": State 10
      CHARACTER: State 11
      modifier: State 14
      "*": State 15
      "+": State 16
      "?": State 17
      "{": State 18
      binop: State 19
      "|": State 20
      "&": State 21
      "--": State 22
      "-": State 23
      transitional: State 24
      ":": State 25
    reductions:
      $: Rule 2
      ")": Rule 2

  State 4:
    48/n1: group → value • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 7
      "*": Rule 7
      "+": Rule 7
      "?": Rule 7
      "{": Rule 7
      "|": Rule 7
      "&": Rule 7
      "--": Rule 7
      "-": Rule 7
      ":": Rule 7
      "(": Rule 7
      STRING: Rule 7
      "[": Rule 7
      NUMBER: Rule 7
      CHARACTER: Rule 7
      ")": Rule 7

  State 5:
    49/n2: value → "(" • expression ")"
      {}
    50/n1: expression →  • group
      {}
    51/n1: expression →  • group expression
      {}
    52/n1: group →  • group modifier
      {}
    53/n1: group →  • group binop group
      {}
    54/n1: group →  • group transitional
      {}
    55/n1: group →  • value
      {}
    56/n2: value →  • "(" expression ")"
      {}
    57/n1: value →  • STRING
      {}
    58/n1: value →  • contain
      {}
    59/r5: value →  • NUMBER
      {}
    60/n1: value →  • identifier
      {}
    61/n1: contain →  • "[" contain.body "]"
      {}
    62/r5: identifier →  • CHARACTER chars
      {}
    transitions:
      expression: State 26
      group: State 3
      value: State 4
      "(": State 5
      STRING: State 6
      contain: State 7
      NUMBER: State 8
      identifier: State 9
      "[": State 10
      CHARACTER: State 11

  State 6:
    63/n1: value → STRING • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 27
      "*": Rule 27
      "+": Rule 27
      "?": Rule 27
      "{": Rule 27
      "|": Rule 27
      "&": Rule 27
      "--": Rule 27
      "-": Rule 27
      ":": Rule 27
      "(": Rule 27
      STRING: Rule 27
      "[": Rule 27
      NUMBER: Rule 27
      CHARACTER: Rule 27
      ")": Rule 27

  State 7:
    64/n1: value → contain • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 28
      "*": Rule 28
      "+": Rule 28
      "?": Rule 28
      "{": Rule 28
      "|": Rule 28
      "&": Rule 28
      "--": Rule 28
      "-": Rule 28
      ":": Rule 28
      "(": Rule 28
      STRING: Rule 28
      "[": Rule 28
      NUMBER: Rule 28
      CHARACTER: Rule 28
      ")": Rule 28

  State 8:
    65/r5: value → NUMBER • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 29
      "*": Rule 29
      "+": Rule 29
      "?": Rule 29
      "{": Rule 29
      "|": Rule 29
      "&": Rule 29
      "--": Rule 29
      "-": Rule 29
      ":": Rule 29
      "(": Rule 29
      STRING: Rule 29
      "[": Rule 29
      NUMBER: Rule 29
      CHARACTER: Rule 29
      ")": Rule 29

  State 9:
    66/n1: value → identifier • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 30
      "*": Rule 30
      "+": Rule 30
      "?": Rule 30
      "{": Rule 30
      "|": Rule 30
      "&": Rule 30
      "--": Rule 30
      "-": Rule 30
      ":": Rule 30
      "(": Rule 30
      STRING: Rule 30
      "[": Rule 30
      NUMBER: Rule 30
      CHARACTER: Rule 30
      ")": Rule 30

  State 10:
    67/n1: contain → "[" • contain.body "]"
      {}
    68/n1: contain.body →  • "^" contain.parts
      {}
    69/n1: contain.body →  • contain.parts
      {}
    70/n1: contain.parts →  • contain.part
      {}
    71/n1: contain.parts →  • contain.part contain.parts
      {}
    72/n1: contain.part →  • contain.char
      {}
    73/l6: contain.part →  • contain.char "-" contain.char
      {}
    74/l6: contain.part →  • "-"
      {}
    75/r5: contain.char →  • CHARACTER
      {}
    76/r5: contain.char →  • NUMBER
      {}
    77/n1: contain.char →  • ESCAPED
      {}
    transitions:
      contain.body: State 27
      "^": State 28
      contain.parts: State 29
      contain.part: State 30
      contain.char: State 31
      "-": State 32
      CHARACTER: State 33
      NUMBER: State 34
      ESCAPED: State 35

  State 11:
    78/r5: identifier → CHARACTER • chars
      {}
    79/n1: chars →  • char
      {}
    80/n1: chars →  • char chars
      {}
    81/r5: char →  • CHARACTER
      {}
    82/r5: char →  • NUMBER
      {}
    83/l6: char →  • "-"
      {}
    transitions:
      chars: State 36
      char: State 37
      CHARACTER: State 38
      NUMBER: State 39
      "-": State 40

  State 12:
    84/n0: $start → main $ • 
      {}
    accepting:
      $: Rule 0

  State 13:
    85/n1: expression → group expression • 
      {$, ")"}
    reductions:
      $: Rule 3
      ")": Rule 3

  State 14:
    86/n1: group → group modifier • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 4
      "*": Rule 4
      "+": Rule 4
      "?": Rule 4
      "{": Rule 4
      "|": Rule 4
      "&": Rule 4
      "--": Rule 4
      "-": Rule 4
      ":": Rule 4
      "(": Rule 4
      STRING: Rule 4
      "[": Rule 4
      NUMBER: Rule 4
      CHARACTER: Rule 4
      ")": Rule 4

  State 15:
    87/l4: modifier → "*" • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 8
      "*": Rule 8
      "+": Rule 8
      "?": Rule 8
      "{": Rule 8
      "|": Rule 8
      "&": Rule 8
      "--": Rule 8
      "-": Rule 8
      ":": Rule 8
      "(": Rule 8
      STRING: Rule 8
      "[": Rule 8
      NUMBER: Rule 8
      CHARACTER: Rule 8
      ")": Rule 8

  State 16:
    88/l4: modifier → "+" • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 9
      "*": Rule 9
      "+": Rule 9
      "?": Rule 9
      "{": Rule 9
      "|": Rule 9
      "&": Rule 9
      "--": Rule 9
      "-": Rule 9
      ":": Rule 9
      "(": Rule 9
      STRING: Rule 9
      "[": Rule 9
      NUMBER: Rule 9
      CHARACTER: Rule 9
      ")": Rule 9

  State 17:
    89/l4: modifier → "?" • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 10
      "*": Rule 10
      "+": Rule 10
      "?": Rule 10
      "{": Rule 10
      "|": Rule 10
      "&": Rule 10
      "--": Rule 10
      "-": Rule 10
      ":": Rule 10
      "(": Rule 10
      STRING: Rule 10
      "[": Rule 10
      NUMBER: Rule 10
      CHARACTER: Rule 10
      ")": Rule 10

  State 18:
    90/n3: modifier → "{" • NUMBER "}"
      {}
    91/n3: modifier → "{" • "," NUMBER "}"
      {}
    92/n3: modifier → "{" • NUMBER "," "}"
      {}
    93/n3: modifier → "{" • NUMBER "," NUMBER "}"
      {}
    transitions:
      NUMBER: State 41
      ",": State 42

  State 19:
    94/n1: group → group binop • group
      {}
    95/n1: group →  • group modifier
      {}
    96/n1: group →  • group binop group
      {}
    97/n1: group →  • group transitional
      {}
    98/n1: group →  • value
      {}
    99/n2: value →  • "(" expression ")"
      {}
    100/n1: value →  • STRING
      {}
    101/n1: value →  • contain
      {}
    102/r5: value →  • NUMBER
      {}
    103/n1: value →  • identifier
      {}
    104/n1: contain →  • "[" contain.body "]"
      {}
    105/r5: identifier →  • CHARACTER chars
      {}
    transitions:
      group: State 43
      value: State 4
      "(": State 5
      STRING: State 6
      contain: State 7
      NUMBER: State 8
      identifier: State 9
      "[": State 10
      CHARACTER: State 11

  State 20:
    106/l6: binop → "|" • 
      {"*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER}
    reductions:
      "*": Rule 15
      "+": Rule 15
      "?": Rule 15
      "{": Rule 15
      "|": Rule 15
      "&": Rule 15
      "--": Rule 15
      "-": Rule 15
      ":": Rule 15
      "(": Rule 15
      STRING: Rule 15
      "[": Rule 15
      NUMBER: Rule 15
      CHARACTER: Rule 15

  State 21:
    107/l6: binop → "&" • 
      {"*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER}
    reductions:
      "*": Rule 16
      "+": Rule 16
      "?": Rule 16
      "{": Rule 16
      "|": Rule 16
      "&": Rule 16
      "--": Rule 16
      "-": Rule 16
      ":": Rule 16
      "(": Rule 16
      STRING: Rule 16
      "[": Rule 16
      NUMBER: Rule 16
      CHARACTER: Rule 16

  State 22:
    108/l6: binop → "--" • 
      {"*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER}
    reductions:
      "*": Rule 17
      "+": Rule 17
      "?": Rule 17
      "{": Rule 17
      "|": Rule 17
      "&": Rule 17
      "--": Rule 17
      "-": Rule 17
      ":": Rule 17
      "(": Rule 17
      STRING: Rule 17
      "[": Rule 17
      NUMBER: Rule 17
      CHARACTER: Rule 17

  State 23:
    109/l6: binop → "-" • 
      {"*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER}
    reductions:
      "*": Rule 18
      "+": Rule 18
      "?": Rule 18
      "{": Rule 18
      "|": Rule 18
      "&": Rule 18
      "--": Rule 18
      "-": Rule 18
      ":": Rule 18
      "(": Rule 18
      STRING: Rule 18
      "[": Rule 18
      NUMBER: Rule 18
      CHARACTER: Rule 18

  State 24:
    110/n1: group → group transitional • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 6
      "*": Rule 6
      "+": Rule 6
      "?": Rule 6
      "{": Rule 6
      "|": Rule 6
      "&": Rule 6
      "--": Rule 6
      "-": Rule 6
      ":": Rule 6
      "(": Rule 6
      STRING: Rule 6
      "[": Rule 6
      NUMBER: Rule 6
      CHARACTER: Rule 6
      ")": Rule 6

  State 25:
    111/n1: transitional → ":" • transitional.type transitional.on chars "<" NUMBER ">"
      {}
    112/n1: transitional.type →  • ">"
      {}
    113/n1: transitional.type →  • "<"
      {}
    114/n1: transitional → ":" • transitional.type transitional.on "<" NUMBER ">"
      {}
    transitions:
      transitional.type: State 44
      ">": State 45
      "<": State 46

  State 26:
    115/n2: value → "(" expression • ")"
      {}
    transitions:
      ")": State 47

  State 27:
    116/n1: contain → "[" contain.body • "]"
      {}
    transitions:
      "]": State 48

  State 28:
    117/n1: contain.body → "^" • contain.parts
      {}
    118/n1: contain.parts →  • contain.part
      {}
    119/n1: contain.parts →  • contain.part contain.parts
      {}
    120/n1: contain.part →  • contain.char
      {}
    121/l6: contain.part →  • contain.char "-" contain.char
      {}
    122/l6: contain.part →  • "-"
      {}
    123/r5: contain.char →  • CHARACTER
      {}
    124/r5: contain.char →  • NUMBER
      {}
    125/n1: contain.char →  • ESCAPED
      {}
    transitions:
      contain.parts: State 49
      contain.part: State 30
      contain.char: State 31
      "-": State 32
      CHARACTER: State 33
      NUMBER: State 34
      ESCAPED: State 35

  State 29:
    126/n1: contain.body → contain.parts • 
      {"]"}
    reductions:
      "]": Rule 39

  State 30:
    127/n1: contain.parts → contain.part • 
      {"]"}
    128/n1: contain.parts → contain.part • contain.parts
      {}
    129/n1: contain.parts →  • contain.part
      {}
    130/n1: contain.parts →  • contain.part contain.parts
      {}
    131/n1: contain.part →  • contain.char
      {}
    132/l6: contain.part →  • contain.char "-" contain.char
      {}
    133/l6: contain.part →  • "-"
      {}
    134/r5: contain.char →  • CHARACTER
      {}
    135/r5: contain.char →  • NUMBER
      {}
    136/n1: contain.char →  • ESCAPED
      {}
    transitions:
      contain.parts: State 50
      contain.part: State 30
      contain.char: State 31
      "-": State 32
      CHARACTER: State 33
      NUMBER: State 34
      ESCAPED: State 35
    reductions:
      "]": Rule 40

  State 31:
    137/n1: contain.part → contain.char • 
      {"]", CHARACTER, NUMBER, ESCAPED, "-"}
    138/l6: contain.part → contain.char • "-" contain.char
      {}
    transitions:
      "-": State 51
    reductions:
      "]": Rule 42
      CHARACTER: Rule 42
      NUMBER: Rule 42
      ESCAPED: Rule 42

  State 32:
    139/l6: contain.part → "-" • 
      {"]", CHARACTER, NUMBER, ESCAPED, "-"}
    reductions:
      "]": Rule 44
      CHARACTER: Rule 44
      NUMBER: Rule 44
      ESCAPED: Rule 44
      "-": Rule 44

  State 33:
    140/r5: contain.char → CHARACTER • 
      {"]", CHARACTER, NUMBER, ESCAPED, "-"}
    reductions:
      "]": Rule 45
      CHARACTER: Rule 45
      NUMBER: Rule 45
      ESCAPED: Rule 45
      "-": Rule 45

  State 34:
    141/r5: contain.char → NUMBER • 
      {"]", CHARACTER, NUMBER, ESCAPED, "-"}
    reductions:
      "]": Rule 46
      CHARACTER: Rule 46
      NUMBER: Rule 46
      ESCAPED: Rule 46
      "-": Rule 46

  State 35:
    142/n1: contain.char → ESCAPED • 
      {"]", CHARACTER, NUMBER, ESCAPED, "-"}
    reductions:
      "]": Rule 47
      CHARACTER: Rule 47
      NUMBER: Rule 47
      ESCAPED: Rule 47
      "-": Rule 47

  State 36:
    143/r5: identifier → CHARACTER chars • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 32
      "*": Rule 32
      "+": Rule 32
      "?": Rule 32
      "{": Rule 32
      "|": Rule 32
      "&": Rule 32
      "--": Rule 32
      "-": Rule 32
      ":": Rule 32
      "(": Rule 32
      STRING: Rule 32
      "[": Rule 32
      NUMBER: Rule 32
      CHARACTER: Rule 32
      ")": Rule 32

  State 37:
    144/n1: chars → char • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")", "<"}
    145/n1: chars → char • chars
      {}
    146/n1: chars →  • char
      {}
    147/n1: chars →  • char chars
      {}
    148/r5: char →  • CHARACTER
      {}
    149/r5: char →  • NUMBER
      {}
    150/l6: char →  • "-"
      {}
    transitions:
      chars: State 52
      char: State 37
      CHARACTER: State 38
      NUMBER: State 39
      "-": State 40
    reductions:
      $: Rule 33
      "*": Rule 33
      "+": Rule 33
      "?": Rule 33
      "{": Rule 33
      "|": Rule 33
      "&": Rule 33
      "--": Rule 33
      ":": Rule 33
      "(": Rule 33
      STRING: Rule 33
      "[": Rule 33
      ")": Rule 33
      "<": Rule 33

  State 38:
    151/r5: char → CHARACTER • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")", "<"}
    reductions:
      $: Rule 35
      "*": Rule 35
      "+": Rule 35
      "?": Rule 35
      "{": Rule 35
      "|": Rule 35
      "&": Rule 35
      "--": Rule 35
      "-": Rule 35
      ":": Rule 35
      "(": Rule 35
      STRING: Rule 35
      "[": Rule 35
      NUMBER: Rule 35
      CHARACTER: Rule 35
      ")": Rule 35
      "<": Rule 35

  State 39:
    152/r5: char → NUMBER • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")", "<"}
    reductions:
      $: Rule 36
      "*": Rule 36
      "+": Rule 36
      "?": Rule 36
      "{": Rule 36
      "|": Rule 36
      "&": Rule 36
      "--": Rule 36
      "-": Rule 36
      ":": Rule 36
      "(": Rule 36
      STRING: Rule 36
      "[": Rule 36
      NUMBER: Rule 36
      CHARACTER: Rule 36
      ")": Rule 36
      "<": Rule 36

  State 40:
    153/l6: char → "-" • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")", "<"}
    reductions:
      $: Rule 37
      "*": Rule 37
      "+": Rule 37
      "?": Rule 37
      "{": Rule 37
      "|": Rule 37
      "&": Rule 37
      "--": Rule 37
      "-": Rule 37
      ":": Rule 37
      "(": Rule 37
      STRING: Rule 37
      "[": Rule 37
      NUMBER: Rule 37
      CHARACTER: Rule 37
      ")": Rule 37
      "<": Rule 37

  State 41:
    154/n3: modifier → "{" NUMBER • "}"
      {}
    155/n3: modifier → "{" NUMBER • "," "}"
      {}
    156/n3: modifier → "{" NUMBER • "," NUMBER "}"
      {}
    transitions:
      "}": State 53
      ",": State 54

  State 42:
    157/n3: modifier → "{" "," • NUMBER "}"
      {}
    transitions:
      NUMBER: State 55

  State 43:
    158/n1: group → group binop group • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    159/n1: group → group • modifier
      {}
    160/l4: modifier →  • "*"
      {}
    161/l4: modifier →  • "+"
      {}
    162/l4: modifier →  • "?"
      {}
    163/n3: modifier →  • "{" NUMBER "}"
      {}
    164/n3: modifier →  • "{" "," NUMBER "}"
      {}
    165/n3: modifier →  • "{" NUMBER "," "}"
      {}
    166/n3: modifier →  • "{" NUMBER "," NUMBER "}"
      {}
    167/n1: group → group • binop group
      {}
    168/l6: binop →  • "|"
      {}
    169/l6: binop →  • "&"
      {}
    170/l6: binop →  • "--"
      {}
    171/l6: binop →  • "-"
      {}
    172/n1: group → group • transitional
      {}
    173/n1: transitional →  • ":" transitional.type transitional.on chars "<" NUMBER ">"
      {}
    174/n1: transitional →  • ":" transitional.type transitional.on "<" NUMBER ">"
      {}
    transitions:
      modifier: State 14
      "*": State 15
      "+": State 16
      "?": State 17
      "{": State 18
      binop: State 19
      "|": State 20
      "&": State 21
      "--": State 22
      "-": State 23
      transitional: State 24
      ":": State 25
    reductions:
      $: Rule 5
      "(": Rule 5
      STRING: Rule 5
      "[": Rule 5
      NUMBER: Rule 5
      CHARACTER: Rule 5
      ")": Rule 5

  State 44:
    175/n1: transitional → ":" transitional.type • transitional.on chars "<" NUMBER ">"
      {}
    176/n1: transitional.on →  • "$"
      {}
    177/n1: transitional.on →  • "%"
      {}
    178/n1: transitional.on →  • "@"
      {}
    179/n1: transitional → ":" transitional.type • transitional.on "<" NUMBER ">"
      {}
    transitions:
      transitional.on: State 56
      "$": State 57
      "%": State 58
      "@": State 59

  State 45:
    180/n1: transitional.type → ">" • 
      {"$", "%", "@"}
    reductions:
      "$": Rule 21
      "%": Rule 21
      "@": Rule 21

  State 46:
    181/n1: transitional.type → "<" • 
      {"$", "%", "@"}
    reductions:
      "$": Rule 22
      "%": Rule 22
      "@": Rule 22

  State 47:
    182/n2: value → "(" expression ")" • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 26
      "*": Rule 26
      "+": Rule 26
      "?": Rule 26
      "{": Rule 26
      "|": Rule 26
      "&": Rule 26
      "--": Rule 26
      "-": Rule 26
      ":": Rule 26
      "(": Rule 26
      STRING: Rule 26
      "[": Rule 26
      NUMBER: Rule 26
      CHARACTER: Rule 26
      ")": Rule 26

  State 48:
    183/n1: contain → "[" contain.body "]" • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 31
      "*": Rule 31
      "+": Rule 31
      "?": Rule 31
      "{": Rule 31
      "|": Rule 31
      "&": Rule 31
      "--": Rule 31
      "-": Rule 31
      ":": Rule 31
      "(": Rule 31
      STRING: Rule 31
      "[": Rule 31
      NUMBER: Rule 31
      CHARACTER: Rule 31
      ")": Rule 31

  State 49:
    184/n1: contain.body → "^" contain.parts • 
      {"]"}
    reductions:
      "]": Rule 38

  State 50:
    185/n1: contain.parts → contain.part contain.parts • 
      {"]"}
    reductions:
      "]": Rule 41

  State 51:
    186/l6: contain.part → contain.char "-" • contain.char
      {}
    187/r5: contain.char →  • CHARACTER
      {}
    188/r5: contain.char →  • NUMBER
      {}
    189/n1: contain.char →  • ESCAPED
      {}
    transitions:
      contain.char: State 60
      CHARACTER: State 33
      NUMBER: State 34
      ESCAPED: State 35

  State 52:
    190/n1: chars → char chars • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")", "<"}
    reductions:
      $: Rule 34
      "*": Rule 34
      "+": Rule 34
      "?": Rule 34
      "{": Rule 34
      "|": Rule 34
      "&": Rule 34
      "--": Rule 34
      "-": Rule 34
      ":": Rule 34
      "(": Rule 34
      STRING: Rule 34
      "[": Rule 34
      NUMBER: Rule 34
      CHARACTER: Rule 34
      ")": Rule 34
      "<": Rule 34

  State 53:
    191/n3: modifier → "{" NUMBER "}" • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 11
      "*": Rule 11
      "+": Rule 11
      "?": Rule 11
      "{": Rule 11
      "|": Rule 11
      "&": Rule 11
      "--": Rule 11
      "-": Rule 11
      ":": Rule 11
      "(": Rule 11
      STRING: Rule 11
      "[": Rule 11
      NUMBER: Rule 11
      CHARACTER: Rule 11
      ")": Rule 11

  State 54:
    192/n3: modifier → "{" NUMBER "," • "}"
      {}
    193/n3: modifier → "{" NUMBER "," • NUMBER "}"
      {}
    transitions:
      "}": State 61
      NUMBER: State 62

  State 55:
    194/n3: modifier → "{" "," NUMBER • "}"
      {}
    transitions:
      "}": State 63

  State 56:
    195/n1: transitional → ":" transitional.type transitional.on • chars "<" NUMBER ">"
      {}
    196/n1: chars →  • char
      {}
    197/n1: chars →  • char chars
      {}
    198/r5: char →  • CHARACTER
      {}
    199/r5: char →  • NUMBER
      {}
    200/l6: char →  • "-"
      {}
    201/n1: transitional → ":" transitional.type transitional.on • "<" NUMBER ">"
      {}
    transitions:
      chars: State 64
      char: State 37
      CHARACTER: State 38
      NUMBER: State 39
      "-": State 40
      "<": State 65

  State 57:
    202/n1: transitional.on → "$" • 
      {CHARACTER, NUMBER, "-", "<"}
    reductions:
      CHARACTER: Rule 23
      NUMBER: Rule 23
      "-": Rule 23
      "<": Rule 23

  State 58:
    203/n1: transitional.on → "%" • 
      {CHARACTER, NUMBER, "-", "<"}
    reductions:
      CHARACTER: Rule 24
      NUMBER: Rule 24
      "-": Rule 24
      "<": Rule 24

  State 59:
    204/n1: transitional.on → "@" • 
      {CHARACTER, NUMBER, "-", "<"}
    reductions:
      CHARACTER: Rule 25
      NUMBER: Rule 25
      "-": Rule 25
      "<": Rule 25

  State 60:
    205/l6: contain.part → contain.char "-" contain.char • 
      {"]", CHARACTER, NUMBER, ESCAPED, "-"}
    reductions:
      "]": Rule 43
      CHARACTER: Rule 43
      NUMBER: Rule 43
      ESCAPED: Rule 43
      "-": Rule 43

  State 61:
    206/n3: modifier → "{" NUMBER "," "}" • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 13
      "*": Rule 13
      "+": Rule 13
      "?": Rule 13
      "{": Rule 13
      "|": Rule 13
      "&": Rule 13
      "--": Rule 13
      "-": Rule 13
      ":": Rule 13
      "(": Rule 13
      STRING: Rule 13
      "[": Rule 13
      NUMBER: Rule 13
      CHARACTER: Rule 13
      ")": Rule 13

  State 62:
    207/n3: modifier → "{" NUMBER "," NUMBER • "}"
      {}
    transitions:
      "}": State 66

  State 63:
    208/n3: modifier → "{" "," NUMBER "}" • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 12
      "*": Rule 12
      "+": Rule 12
      "?": Rule 12
      "{": Rule 12
      "|": Rule 12
      "&": Rule 12
      "--": Rule 12
      "-": Rule 12
      ":": Rule 12
      "(": Rule 12
      STRING: Rule 12
      "[": Rule 12
      NUMBER: Rule 12
      CHARACTER: Rule 12
      ")": Rule 12

  State 64:
    209/n1: transitional → ":" transitional.type transitional.on chars • "<" NUMBER ">"
      {}
    transitions:
      "<": State 67

  State 65:
    210/n1: transitional → ":" transitional.type transitional.on "<" • NUMBER ">"
      {}
    transitions:
      NUMBER: State 68

  State 66:
    211/n3: modifier → "{" NUMBER "," NUMBER "}" • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 14
      "*": Rule 14
      "+": Rule 14
      "?": Rule 14
      "{": Rule 14
      "|": Rule 14
      "&": Rule 14
      "--": Rule 14
      "-": Rule 14
      ":": Rule 14
      "(": Rule 14
      STRING: Rule 14
      "[": Rule 14
      NUMBER: Rule 14
      CHARACTER: Rule 14
      ")": Rule 14

  State 67:
    212/n1: transitional → ":" transitional.type transitional.on chars "<" • NUMBER ">"
      {}
    transitions:
      NUMBER: State 69

  State 68:
    213/n1: transitional → ":" transitional.type transitional.on "<" NUMBER • ">"
      {}
    transitions:
      ">": State 70

  State 69:
    214/n1: transitional → ":" transitional.type transitional.on chars "<" NUMBER • ">"
      {}
    transitions:
      ">": State 71

  State 70:
    215/n1: transitional → ":" transitional.type transitional.on "<" NUMBER ">" • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 20
      "*": Rule 20
      "+": Rule 20
      "?": Rule 20
      "{": Rule 20
      "|": Rule 20
      "&": Rule 20
      "--": Rule 20
      "-": Rule 20
      ":": Rule 20
      "(": Rule 20
      STRING: Rule 20
      "[": Rule 20
      NUMBER: Rule 20
      CHARACTER: Rule 20
      ")": Rule 20

  State 71:
    216/n1: transitional → ":" transitional.type transitional.on chars "<" NUMBER ">" • 
      {$, "*", "+", "?", "{", "|", "&", "--", "-", ":", "(", STRING, "[", NUMBER, CHARACTER, ")"}
    reductions:
      $: Rule 19
      "*": Rule 19
      "+": Rule 19
      "?": Rule 19
      "{": Rule 19
      "|": Rule 19
      "&": Rule 19
      "--": Rule 19
      "-": Rule 19
      ":": Rule 19
      "(": Rule 19
      STRING: Rule 19
      "[": Rule 19
      NUMBER: Rule 19
      CHARACTER: Rule 19
      ")": Rule 19

