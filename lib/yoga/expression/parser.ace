
%require "~> 0.1"
%type "ruby"

%terminal STAR "*"
%terminal PLUS "+"
%terminal OPTIONAL "?"
%terminal UNION "|"
%terminal INTERSECT "&"
%terminal SDIFFERENCE "--"
%terminal DIFFERENCE "-"
%terminal LPAREN "("
%terminal RPAREN ")"
%terminal STRING
%terminal CONTAIN
%terminal NUMBER
%terminal IDENTIFIER

%left UNION INTERSECT SDIFFERENCE DIFFERENCE
%left STAR PLUS OPTIONAL
%nonassoc LPAREN RPAREN

%%

expression: group            { |_| [_]       }
          | group expression { |a, b| b.unshift(a) }

group: group modifier        { |a, b| [b, a] }
     | group binop group     { |a, b, c| compile_binop(b, a, c) }
     | value

modifier: STAR       { |_| _[0] }
        | PLUS       { |_| _[0] }
        | OPTIONAL   { |_| _[0] }

binop: UNION       { |_| _[0] }
     | INTERSECT   { |_| _[0] }
     | SDIFFERENCE { |_| _[0] }
     | DIFFERENCE  { |_| _[0] }

value: LPAREN expression RPAREN { |_, a, _| a }
     | STRING                   { |_| compile_string(_)  }
     | CONTAIN                  { |_| compile_contain(_) }
     | NUMBER                   { |_| compile_number(_)  }
     | IDENTIFIER

%%

module Yoga
  class Expression
    module Parser
      %{write}

      def type(token)
        token[0].to_s.upcase.intern
      end
    end
  end
end
