
%require "~> 0.1"
%type "ruby"

%token STAR "*"
%token PLUS "+"
%token OPTIONAL "?"
%token UNION "|"
%token INTERSECT "&"
%token SDIFFERENCE "--"
%token DIFFERENCE "-"
%token LPAREN "("
%token RPAREN ")"
%token LBRACK "["
%token RBRACK "]"
%token INVERT "^"
%token LBRACE "{"
%token RBRACE "}"
%token GREATER ">"
%token LESSER "<"
%token COLON ":"
%token COMMA ","
%token PERCENT "%"
%token DOLLAR "$"
%token AT "@"
%token ESCAPED
%token CHARACTER
%token STRING
%token NUMBER

%nonassoc COLON
%left UNION INTERSECT SDIFFERENCE DIFFERENCE
%right CHARACTER NUMBER
%left STAR PLUS OPTIONAL
%nonassoc LBRACE RBRACE
%nonassoc LPAREN RPAREN

%%

main: expression             { |_| compile_paren(_) }

expression: group            { |_|    [_]           }
          | group expression { |a, b| b.unshift(a)  }

group: group modifier        { |a, b|    compile_modifier(b, a)     }
     | group binop group     { |a, b, c| compile_binop(b, a, c)     }
     | group transitional    { |a, b|    compile_transitional(b, a) }
     | value

modifier: STAR       { |_| _[0] }
        | PLUS       { |_| _[0] }
        | OPTIONAL   { |_| _[0] }
        | LBRACE NUMBER RBRACE
        | LBRACE COMMA NUMBER RBRACE
        | LBRACE NUMBER COMMA RBRACE
        | LBRACE NUMBER COMMA NUMBER RBRACE

binop: UNION       { |_| _[0] }
     | INTERSECT   { |_| _[0] }
     | SDIFFERENCE { |_| _[0] }
     | DIFFERENCE  { |_| _[0] }

transitional: COLON transitional.type transitional.on chars LESSER NUMBER GREATER
                { |_, a, b, c,_, d, _| [a[0], b[0], c, d[1]]   }
            | COLON transitional.type transitional.on LESSER NUMBER GREATER
                { |_, a, b, _, c, _|   [a[0], b[0], "", c[1]]  }

transitional.type: GREATER | LESSER
transitional.on: DOLLAR | PERCENT | AT

value: LPAREN expression RPAREN { |_, a, _| compile_paren(a)      }
     | STRING                   { |_|       compile_string(_)     }
     | contain                  { |_|       compile_contain(_)    }
     | NUMBER                   { |_|       compile_number(_)     }
     | identifier               { |_|       compile_identifier(_) }

contain: LBRACK contain.body RBRACK { |_, a, _| a }

identifier: CHARACTER chars     { |a, b| b.unshift(a)             }

chars: char                     { |_|    [_]                      }
     | char chars               { |a, b| b.unshift(a)             }

char: CHARACTER
    | NUMBER
    | DIFFERENCE

contain.body: INVERT contain.parts          { |a, b| b.unshift(a) }
            | contain.parts

contain.parts: contain.part                 { |_|    [_]          }
             | contain.part contain.parts   { |a, b| b.unshift(a) }

contain.part: contain.char
            | contain.char DIFFERENCE contain.char
                { |a, b, c| [:SET, a[1], c[1]] }
            | DIFFERENCE

contain.char: CHARACTER
            | NUMBER
            | ESCAPED

%%

module Yoga
  class Expression
    module Parser
      %{write}

      def type(token)
        token[0].to_s.upcase.intern
      end
    end
  end
end
