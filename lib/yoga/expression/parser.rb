

module Yoga
  class Expression
    module Parser
      
# This file assumes that the output of the generator will be placed
# within a module or a class.  However, the module/class requires a
# `type` method, which takes a terminal and gives its type, as a
# symbol.  These types should line up with the terminals that were
# defined in the original grammar.

# The actions to take during parsing.  In every state, there are a
# set of acceptable peek tokens; this table tells the parser what
# to do on each acceptable peek token.  The possible actions include
# `:accept`, `:reduce`, and `:state`; `:accept` means to accept the
# input and return the value of the pasing.  `:reduce` means to
# reduce the top of the stack into a given nonterminal.  `:state`
# means to transition to another state.
#
# @return [Array<Hash<(Symbol, Array<(Symbol, Numeric)>)>>]
ACTION_TABLE = [{:main=>[:state, 1],
  :expression=>[:state, 2],
  :group=>[:state, 3],
  :value=>[:state, 4],
  :LPAREN=>[:state, 5],
  :STRING=>[:state, 6],
  :contain=>[:state, 7],
  :NUMBER=>[:state, 8],
  :identifier=>[:state, 9],
  :LBRACK=>[:state, 10],
  :CHARACTER=>[:state, 11]},
 {:"$"=>[:state, 12]},
 {:"$"=>[:reduce, 1]},
 {:expression=>[:state, 13],
  :group=>[:state, 3],
  :value=>[:state, 4],
  :LPAREN=>[:state, 5],
  :STRING=>[:state, 6],
  :contain=>[:state, 7],
  :NUMBER=>[:state, 8],
  :identifier=>[:state, 9],
  :LBRACK=>[:state, 10],
  :CHARACTER=>[:state, 11],
  :modifier=>[:state, 14],
  :STAR=>[:state, 15],
  :PLUS=>[:state, 16],
  :OPTIONAL=>[:state, 17],
  :LBRACE=>[:state, 18],
  :binop=>[:state, 19],
  :UNION=>[:state, 20],
  :INTERSECT=>[:state, 21],
  :SDIFFERENCE=>[:state, 22],
  :DIFFERENCE=>[:state, 23],
  :transitional=>[:state, 24],
  :COLON=>[:state, 25],
  :"$"=>[:reduce, 2],
  :RPAREN=>[:reduce, 2]},
 {:"$"=>[:reduce, 7],
  :STAR=>[:reduce, 7],
  :PLUS=>[:reduce, 7],
  :OPTIONAL=>[:reduce, 7],
  :LBRACE=>[:reduce, 7],
  :UNION=>[:reduce, 7],
  :INTERSECT=>[:reduce, 7],
  :SDIFFERENCE=>[:reduce, 7],
  :DIFFERENCE=>[:reduce, 7],
  :COLON=>[:reduce, 7],
  :LPAREN=>[:reduce, 7],
  :STRING=>[:reduce, 7],
  :LBRACK=>[:reduce, 7],
  :NUMBER=>[:reduce, 7],
  :CHARACTER=>[:reduce, 7],
  :RPAREN=>[:reduce, 7]},
 {:expression=>[:state, 26],
  :group=>[:state, 3],
  :value=>[:state, 4],
  :LPAREN=>[:state, 5],
  :STRING=>[:state, 6],
  :contain=>[:state, 7],
  :NUMBER=>[:state, 8],
  :identifier=>[:state, 9],
  :LBRACK=>[:state, 10],
  :CHARACTER=>[:state, 11]},
 {:"$"=>[:reduce, 26],
  :STAR=>[:reduce, 26],
  :PLUS=>[:reduce, 26],
  :OPTIONAL=>[:reduce, 26],
  :LBRACE=>[:reduce, 26],
  :UNION=>[:reduce, 26],
  :INTERSECT=>[:reduce, 26],
  :SDIFFERENCE=>[:reduce, 26],
  :DIFFERENCE=>[:reduce, 26],
  :COLON=>[:reduce, 26],
  :LPAREN=>[:reduce, 26],
  :STRING=>[:reduce, 26],
  :LBRACK=>[:reduce, 26],
  :NUMBER=>[:reduce, 26],
  :CHARACTER=>[:reduce, 26],
  :RPAREN=>[:reduce, 26]},
 {:"$"=>[:reduce, 27],
  :STAR=>[:reduce, 27],
  :PLUS=>[:reduce, 27],
  :OPTIONAL=>[:reduce, 27],
  :LBRACE=>[:reduce, 27],
  :UNION=>[:reduce, 27],
  :INTERSECT=>[:reduce, 27],
  :SDIFFERENCE=>[:reduce, 27],
  :DIFFERENCE=>[:reduce, 27],
  :COLON=>[:reduce, 27],
  :LPAREN=>[:reduce, 27],
  :STRING=>[:reduce, 27],
  :LBRACK=>[:reduce, 27],
  :NUMBER=>[:reduce, 27],
  :CHARACTER=>[:reduce, 27],
  :RPAREN=>[:reduce, 27]},
 {:"$"=>[:reduce, 28],
  :STAR=>[:reduce, 28],
  :PLUS=>[:reduce, 28],
  :OPTIONAL=>[:reduce, 28],
  :LBRACE=>[:reduce, 28],
  :UNION=>[:reduce, 28],
  :INTERSECT=>[:reduce, 28],
  :SDIFFERENCE=>[:reduce, 28],
  :DIFFERENCE=>[:reduce, 28],
  :COLON=>[:reduce, 28],
  :LPAREN=>[:reduce, 28],
  :STRING=>[:reduce, 28],
  :LBRACK=>[:reduce, 28],
  :NUMBER=>[:reduce, 28],
  :CHARACTER=>[:reduce, 28],
  :RPAREN=>[:reduce, 28]},
 {:"$"=>[:reduce, 29],
  :STAR=>[:reduce, 29],
  :PLUS=>[:reduce, 29],
  :OPTIONAL=>[:reduce, 29],
  :LBRACE=>[:reduce, 29],
  :UNION=>[:reduce, 29],
  :INTERSECT=>[:reduce, 29],
  :SDIFFERENCE=>[:reduce, 29],
  :DIFFERENCE=>[:reduce, 29],
  :COLON=>[:reduce, 29],
  :LPAREN=>[:reduce, 29],
  :STRING=>[:reduce, 29],
  :LBRACK=>[:reduce, 29],
  :NUMBER=>[:reduce, 29],
  :CHARACTER=>[:reduce, 29],
  :RPAREN=>[:reduce, 29]},
 {:"contain.body"=>[:state, 27],
  :INVERT=>[:state, 28],
  :"contain.parts"=>[:state, 29],
  :"contain.part"=>[:state, 30],
  :"contain.char"=>[:state, 31],
  :DIFFERENCE=>[:state, 32],
  :CHARACTER=>[:state, 33],
  :NUMBER=>[:state, 34],
  :ESCAPED=>[:state, 35]},
 {:chars=>[:state, 36],
  :char=>[:state, 37],
  :CHARACTER=>[:state, 38],
  :NUMBER=>[:state, 39],
  :DIFFERENCE=>[:state, 40]},
 {:"$"=>[:accept, 0]},
 {:"$"=>[:reduce, 3], :RPAREN=>[:reduce, 3]},
 {:"$"=>[:reduce, 4],
  :STAR=>[:reduce, 4],
  :PLUS=>[:reduce, 4],
  :OPTIONAL=>[:reduce, 4],
  :LBRACE=>[:reduce, 4],
  :UNION=>[:reduce, 4],
  :INTERSECT=>[:reduce, 4],
  :SDIFFERENCE=>[:reduce, 4],
  :DIFFERENCE=>[:reduce, 4],
  :COLON=>[:reduce, 4],
  :LPAREN=>[:reduce, 4],
  :STRING=>[:reduce, 4],
  :LBRACK=>[:reduce, 4],
  :NUMBER=>[:reduce, 4],
  :CHARACTER=>[:reduce, 4],
  :RPAREN=>[:reduce, 4]},
 {:"$"=>[:reduce, 8],
  :STAR=>[:reduce, 8],
  :PLUS=>[:reduce, 8],
  :OPTIONAL=>[:reduce, 8],
  :LBRACE=>[:reduce, 8],
  :UNION=>[:reduce, 8],
  :INTERSECT=>[:reduce, 8],
  :SDIFFERENCE=>[:reduce, 8],
  :DIFFERENCE=>[:reduce, 8],
  :COLON=>[:reduce, 8],
  :LPAREN=>[:reduce, 8],
  :STRING=>[:reduce, 8],
  :LBRACK=>[:reduce, 8],
  :NUMBER=>[:reduce, 8],
  :CHARACTER=>[:reduce, 8],
  :RPAREN=>[:reduce, 8]},
 {:"$"=>[:reduce, 9],
  :STAR=>[:reduce, 9],
  :PLUS=>[:reduce, 9],
  :OPTIONAL=>[:reduce, 9],
  :LBRACE=>[:reduce, 9],
  :UNION=>[:reduce, 9],
  :INTERSECT=>[:reduce, 9],
  :SDIFFERENCE=>[:reduce, 9],
  :DIFFERENCE=>[:reduce, 9],
  :COLON=>[:reduce, 9],
  :LPAREN=>[:reduce, 9],
  :STRING=>[:reduce, 9],
  :LBRACK=>[:reduce, 9],
  :NUMBER=>[:reduce, 9],
  :CHARACTER=>[:reduce, 9],
  :RPAREN=>[:reduce, 9]},
 {:"$"=>[:reduce, 10],
  :STAR=>[:reduce, 10],
  :PLUS=>[:reduce, 10],
  :OPTIONAL=>[:reduce, 10],
  :LBRACE=>[:reduce, 10],
  :UNION=>[:reduce, 10],
  :INTERSECT=>[:reduce, 10],
  :SDIFFERENCE=>[:reduce, 10],
  :DIFFERENCE=>[:reduce, 10],
  :COLON=>[:reduce, 10],
  :LPAREN=>[:reduce, 10],
  :STRING=>[:reduce, 10],
  :LBRACK=>[:reduce, 10],
  :NUMBER=>[:reduce, 10],
  :CHARACTER=>[:reduce, 10],
  :RPAREN=>[:reduce, 10]},
 {:NUMBER=>[:state, 41], :COMMA=>[:state, 42]},
 {:group=>[:state, 43],
  :value=>[:state, 4],
  :LPAREN=>[:state, 5],
  :STRING=>[:state, 6],
  :contain=>[:state, 7],
  :NUMBER=>[:state, 8],
  :identifier=>[:state, 9],
  :LBRACK=>[:state, 10],
  :CHARACTER=>[:state, 11]},
 {:STAR=>[:reduce, 15],
  :PLUS=>[:reduce, 15],
  :OPTIONAL=>[:reduce, 15],
  :LBRACE=>[:reduce, 15],
  :UNION=>[:reduce, 15],
  :INTERSECT=>[:reduce, 15],
  :SDIFFERENCE=>[:reduce, 15],
  :DIFFERENCE=>[:reduce, 15],
  :COLON=>[:reduce, 15],
  :LPAREN=>[:reduce, 15],
  :STRING=>[:reduce, 15],
  :LBRACK=>[:reduce, 15],
  :NUMBER=>[:reduce, 15],
  :CHARACTER=>[:reduce, 15]},
 {:STAR=>[:reduce, 16],
  :PLUS=>[:reduce, 16],
  :OPTIONAL=>[:reduce, 16],
  :LBRACE=>[:reduce, 16],
  :UNION=>[:reduce, 16],
  :INTERSECT=>[:reduce, 16],
  :SDIFFERENCE=>[:reduce, 16],
  :DIFFERENCE=>[:reduce, 16],
  :COLON=>[:reduce, 16],
  :LPAREN=>[:reduce, 16],
  :STRING=>[:reduce, 16],
  :LBRACK=>[:reduce, 16],
  :NUMBER=>[:reduce, 16],
  :CHARACTER=>[:reduce, 16]},
 {:STAR=>[:reduce, 17],
  :PLUS=>[:reduce, 17],
  :OPTIONAL=>[:reduce, 17],
  :LBRACE=>[:reduce, 17],
  :UNION=>[:reduce, 17],
  :INTERSECT=>[:reduce, 17],
  :SDIFFERENCE=>[:reduce, 17],
  :DIFFERENCE=>[:reduce, 17],
  :COLON=>[:reduce, 17],
  :LPAREN=>[:reduce, 17],
  :STRING=>[:reduce, 17],
  :LBRACK=>[:reduce, 17],
  :NUMBER=>[:reduce, 17],
  :CHARACTER=>[:reduce, 17]},
 {:STAR=>[:reduce, 18],
  :PLUS=>[:reduce, 18],
  :OPTIONAL=>[:reduce, 18],
  :LBRACE=>[:reduce, 18],
  :UNION=>[:reduce, 18],
  :INTERSECT=>[:reduce, 18],
  :SDIFFERENCE=>[:reduce, 18],
  :DIFFERENCE=>[:reduce, 18],
  :COLON=>[:reduce, 18],
  :LPAREN=>[:reduce, 18],
  :STRING=>[:reduce, 18],
  :LBRACK=>[:reduce, 18],
  :NUMBER=>[:reduce, 18],
  :CHARACTER=>[:reduce, 18]},
 {:"$"=>[:reduce, 6],
  :STAR=>[:reduce, 6],
  :PLUS=>[:reduce, 6],
  :OPTIONAL=>[:reduce, 6],
  :LBRACE=>[:reduce, 6],
  :UNION=>[:reduce, 6],
  :INTERSECT=>[:reduce, 6],
  :SDIFFERENCE=>[:reduce, 6],
  :DIFFERENCE=>[:reduce, 6],
  :COLON=>[:reduce, 6],
  :LPAREN=>[:reduce, 6],
  :STRING=>[:reduce, 6],
  :LBRACK=>[:reduce, 6],
  :NUMBER=>[:reduce, 6],
  :CHARACTER=>[:reduce, 6],
  :RPAREN=>[:reduce, 6]},
 {:LESSER=>[:state, 44]},
 {:RPAREN=>[:state, 45]},
 {:RBRACK=>[:state, 46]},
 {:"contain.parts"=>[:state, 47],
  :"contain.part"=>[:state, 30],
  :"contain.char"=>[:state, 31],
  :DIFFERENCE=>[:state, 32],
  :CHARACTER=>[:state, 33],
  :NUMBER=>[:state, 34],
  :ESCAPED=>[:state, 35]},
 {:RBRACK=>[:reduce, 38]},
 {:"contain.parts"=>[:state, 48],
  :"contain.part"=>[:state, 30],
  :"contain.char"=>[:state, 31],
  :DIFFERENCE=>[:state, 32],
  :CHARACTER=>[:state, 33],
  :NUMBER=>[:state, 34],
  :ESCAPED=>[:state, 35],
  :RBRACK=>[:reduce, 39]},
 {:DIFFERENCE=>[:state, 49],
  :RBRACK=>[:reduce, 41],
  :CHARACTER=>[:reduce, 41],
  :NUMBER=>[:reduce, 41],
  :ESCAPED=>[:reduce, 41]},
 {:RBRACK=>[:reduce, 43],
  :CHARACTER=>[:reduce, 43],
  :NUMBER=>[:reduce, 43],
  :ESCAPED=>[:reduce, 43],
  :DIFFERENCE=>[:reduce, 43]},
 {:RBRACK=>[:reduce, 44],
  :CHARACTER=>[:reduce, 44],
  :NUMBER=>[:reduce, 44],
  :ESCAPED=>[:reduce, 44],
  :DIFFERENCE=>[:reduce, 44]},
 {:RBRACK=>[:reduce, 45],
  :CHARACTER=>[:reduce, 45],
  :NUMBER=>[:reduce, 45],
  :ESCAPED=>[:reduce, 45],
  :DIFFERENCE=>[:reduce, 45]},
 {:RBRACK=>[:reduce, 46],
  :CHARACTER=>[:reduce, 46],
  :NUMBER=>[:reduce, 46],
  :ESCAPED=>[:reduce, 46],
  :DIFFERENCE=>[:reduce, 46]},
 {:"$"=>[:reduce, 31],
  :STAR=>[:reduce, 31],
  :PLUS=>[:reduce, 31],
  :OPTIONAL=>[:reduce, 31],
  :LBRACE=>[:reduce, 31],
  :UNION=>[:reduce, 31],
  :INTERSECT=>[:reduce, 31],
  :SDIFFERENCE=>[:reduce, 31],
  :DIFFERENCE=>[:reduce, 31],
  :COLON=>[:reduce, 31],
  :LPAREN=>[:reduce, 31],
  :STRING=>[:reduce, 31],
  :LBRACK=>[:reduce, 31],
  :NUMBER=>[:reduce, 31],
  :CHARACTER=>[:reduce, 31],
  :RPAREN=>[:reduce, 31]},
 {:chars=>[:state, 50],
  :char=>[:state, 37],
  :CHARACTER=>[:state, 38],
  :NUMBER=>[:state, 39],
  :DIFFERENCE=>[:state, 40],
  :"$"=>[:reduce, 32],
  :STAR=>[:reduce, 32],
  :PLUS=>[:reduce, 32],
  :OPTIONAL=>[:reduce, 32],
  :LBRACE=>[:reduce, 32],
  :UNION=>[:reduce, 32],
  :INTERSECT=>[:reduce, 32],
  :SDIFFERENCE=>[:reduce, 32],
  :COLON=>[:reduce, 32],
  :LPAREN=>[:reduce, 32],
  :STRING=>[:reduce, 32],
  :LBRACK=>[:reduce, 32],
  :RPAREN=>[:reduce, 32]},
 {:"$"=>[:reduce, 34],
  :STAR=>[:reduce, 34],
  :PLUS=>[:reduce, 34],
  :OPTIONAL=>[:reduce, 34],
  :LBRACE=>[:reduce, 34],
  :UNION=>[:reduce, 34],
  :INTERSECT=>[:reduce, 34],
  :SDIFFERENCE=>[:reduce, 34],
  :DIFFERENCE=>[:reduce, 34],
  :COLON=>[:reduce, 34],
  :LPAREN=>[:reduce, 34],
  :STRING=>[:reduce, 34],
  :LBRACK=>[:reduce, 34],
  :NUMBER=>[:reduce, 34],
  :CHARACTER=>[:reduce, 34],
  :RPAREN=>[:reduce, 34]},
 {:GREATER=>[:state, 64],
  :"$"=>[:reduce, 35],
  :STAR=>[:reduce, 35],
  :PLUS=>[:reduce, 35],
  :OPTIONAL=>[:reduce, 35],
  :LBRACE=>[:reduce, 35],
  :UNION=>[:reduce, 35],
  :INTERSECT=>[:reduce, 35],
  :SDIFFERENCE=>[:reduce, 35],
  :DIFFERENCE=>[:reduce, 35],
  :COLON=>[:reduce, 35],
  :LPAREN=>[:reduce, 35],
  :STRING=>[:reduce, 35],
  :LBRACK=>[:reduce, 35],
  :NUMBER=>[:reduce, 35],
  :CHARACTER=>[:reduce, 35],
  :RPAREN=>[:reduce, 35]},
 {:"$"=>[:reduce, 36],
  :STAR=>[:reduce, 36],
  :PLUS=>[:reduce, 36],
  :OPTIONAL=>[:reduce, 36],
  :LBRACE=>[:reduce, 36],
  :UNION=>[:reduce, 36],
  :INTERSECT=>[:reduce, 36],
  :SDIFFERENCE=>[:reduce, 36],
  :DIFFERENCE=>[:reduce, 36],
  :COLON=>[:reduce, 36],
  :LPAREN=>[:reduce, 36],
  :STRING=>[:reduce, 36],
  :LBRACK=>[:reduce, 36],
  :NUMBER=>[:reduce, 36],
  :CHARACTER=>[:reduce, 36],
  :RPAREN=>[:reduce, 36]},
 {:RBRACE=>[:state, 51], :COMMA=>[:state, 52]},
 {:NUMBER=>[:state, 53]},
 {:modifier=>[:state, 14],
  :STAR=>[:state, 15],
  :PLUS=>[:state, 16],
  :OPTIONAL=>[:state, 17],
  :LBRACE=>[:state, 18],
  :binop=>[:state, 19],
  :UNION=>[:state, 20],
  :INTERSECT=>[:state, 21],
  :SDIFFERENCE=>[:state, 22],
  :DIFFERENCE=>[:state, 23],
  :transitional=>[:state, 24],
  :COLON=>[:state, 25],
  :"$"=>[:reduce, 5],
  :LPAREN=>[:reduce, 5],
  :STRING=>[:reduce, 5],
  :LBRACK=>[:reduce, 5],
  :NUMBER=>[:reduce, 5],
  :CHARACTER=>[:reduce, 5],
  :RPAREN=>[:reduce, 5]},
 {:"transitional.type"=>[:state, 54],
  :GREATER=>[:state, 55],
  :LESSER=>[:state, 56],
  :PERCENT=>[:state, 57],
  :DOLLAR=>[:state, 58]},
 {:"$"=>[:reduce, 25],
  :STAR=>[:reduce, 25],
  :PLUS=>[:reduce, 25],
  :OPTIONAL=>[:reduce, 25],
  :LBRACE=>[:reduce, 25],
  :UNION=>[:reduce, 25],
  :INTERSECT=>[:reduce, 25],
  :SDIFFERENCE=>[:reduce, 25],
  :DIFFERENCE=>[:reduce, 25],
  :COLON=>[:reduce, 25],
  :LPAREN=>[:reduce, 25],
  :STRING=>[:reduce, 25],
  :LBRACK=>[:reduce, 25],
  :NUMBER=>[:reduce, 25],
  :CHARACTER=>[:reduce, 25],
  :RPAREN=>[:reduce, 25]},
 {:"$"=>[:reduce, 30],
  :STAR=>[:reduce, 30],
  :PLUS=>[:reduce, 30],
  :OPTIONAL=>[:reduce, 30],
  :LBRACE=>[:reduce, 30],
  :UNION=>[:reduce, 30],
  :INTERSECT=>[:reduce, 30],
  :SDIFFERENCE=>[:reduce, 30],
  :DIFFERENCE=>[:reduce, 30],
  :COLON=>[:reduce, 30],
  :LPAREN=>[:reduce, 30],
  :STRING=>[:reduce, 30],
  :LBRACK=>[:reduce, 30],
  :NUMBER=>[:reduce, 30],
  :CHARACTER=>[:reduce, 30],
  :RPAREN=>[:reduce, 30]},
 {:RBRACK=>[:reduce, 37]},
 {:RBRACK=>[:reduce, 40]},
 {:"contain.char"=>[:state, 59],
  :CHARACTER=>[:state, 33],
  :NUMBER=>[:state, 34],
  :ESCAPED=>[:state, 35]},
 {:"$"=>[:reduce, 33],
  :STAR=>[:reduce, 33],
  :PLUS=>[:reduce, 33],
  :OPTIONAL=>[:reduce, 33],
  :LBRACE=>[:reduce, 33],
  :UNION=>[:reduce, 33],
  :INTERSECT=>[:reduce, 33],
  :SDIFFERENCE=>[:reduce, 33],
  :DIFFERENCE=>[:reduce, 33],
  :COLON=>[:reduce, 33],
  :LPAREN=>[:reduce, 33],
  :STRING=>[:reduce, 33],
  :LBRACK=>[:reduce, 33],
  :NUMBER=>[:reduce, 33],
  :CHARACTER=>[:reduce, 33],
  :RPAREN=>[:reduce, 33]},
 {:"$"=>[:reduce, 11],
  :STAR=>[:reduce, 11],
  :PLUS=>[:reduce, 11],
  :OPTIONAL=>[:reduce, 11],
  :LBRACE=>[:reduce, 11],
  :UNION=>[:reduce, 11],
  :INTERSECT=>[:reduce, 11],
  :SDIFFERENCE=>[:reduce, 11],
  :DIFFERENCE=>[:reduce, 11],
  :COLON=>[:reduce, 11],
  :LPAREN=>[:reduce, 11],
  :STRING=>[:reduce, 11],
  :LBRACK=>[:reduce, 11],
  :NUMBER=>[:reduce, 11],
  :CHARACTER=>[:reduce, 11],
  :RPAREN=>[:reduce, 11]},
 {:RBRACE=>[:state, 60], :NUMBER=>[:state, 61]},
 {:RBRACE=>[:state, 62]},
 {:chars=>[:state, 63],
  :char=>[:state, 37],
  :CHARACTER=>[:state, 38],
  :NUMBER=>[:state, 39],
  :DIFFERENCE=>[:state, 40]},
 {:CHARACTER=>[:reduce, 21],
  :NUMBER=>[:reduce, 21],
  :DIFFERENCE=>[:reduce, 21]},
 {:CHARACTER=>[:reduce, 22],
  :NUMBER=>[:reduce, 22],
  :DIFFERENCE=>[:reduce, 22]},
 {:CHARACTER=>[:reduce, 23],
  :NUMBER=>[:reduce, 23],
  :DIFFERENCE=>[:reduce, 23]},
 {:CHARACTER=>[:reduce, 24],
  :NUMBER=>[:reduce, 24],
  :DIFFERENCE=>[:reduce, 24]},
 {:RBRACK=>[:reduce, 42],
  :CHARACTER=>[:reduce, 42],
  :NUMBER=>[:reduce, 42],
  :ESCAPED=>[:reduce, 42],
  :DIFFERENCE=>[:reduce, 42]},
 {:"$"=>[:reduce, 13],
  :STAR=>[:reduce, 13],
  :PLUS=>[:reduce, 13],
  :OPTIONAL=>[:reduce, 13],
  :LBRACE=>[:reduce, 13],
  :UNION=>[:reduce, 13],
  :INTERSECT=>[:reduce, 13],
  :SDIFFERENCE=>[:reduce, 13],
  :DIFFERENCE=>[:reduce, 13],
  :COLON=>[:reduce, 13],
  :LPAREN=>[:reduce, 13],
  :STRING=>[:reduce, 13],
  :LBRACK=>[:reduce, 13],
  :NUMBER=>[:reduce, 13],
  :CHARACTER=>[:reduce, 13],
  :RPAREN=>[:reduce, 13]},
 {:RBRACE=>[:state, 65]},
 {:"$"=>[:reduce, 12],
  :STAR=>[:reduce, 12],
  :PLUS=>[:reduce, 12],
  :OPTIONAL=>[:reduce, 12],
  :LBRACE=>[:reduce, 12],
  :UNION=>[:reduce, 12],
  :INTERSECT=>[:reduce, 12],
  :SDIFFERENCE=>[:reduce, 12],
  :DIFFERENCE=>[:reduce, 12],
  :COLON=>[:reduce, 12],
  :LPAREN=>[:reduce, 12],
  :STRING=>[:reduce, 12],
  :LBRACK=>[:reduce, 12],
  :NUMBER=>[:reduce, 12],
  :CHARACTER=>[:reduce, 12],
  :RPAREN=>[:reduce, 12]},
 {:NUMBER=>[:state, 66]},
 {:"$"=>[:reduce, 20],
  :STAR=>[:reduce, 20],
  :PLUS=>[:reduce, 20],
  :OPTIONAL=>[:reduce, 20],
  :LBRACE=>[:reduce, 20],
  :UNION=>[:reduce, 20],
  :INTERSECT=>[:reduce, 20],
  :SDIFFERENCE=>[:reduce, 20],
  :DIFFERENCE=>[:reduce, 20],
  :COLON=>[:reduce, 20],
  :LPAREN=>[:reduce, 20],
  :STRING=>[:reduce, 20],
  :LBRACK=>[:reduce, 20],
  :NUMBER=>[:reduce, 20],
  :CHARACTER=>[:reduce, 20],
  :RPAREN=>[:reduce, 20]},
 {:"$"=>[:reduce, 14],
  :STAR=>[:reduce, 14],
  :PLUS=>[:reduce, 14],
  :OPTIONAL=>[:reduce, 14],
  :LBRACE=>[:reduce, 14],
  :UNION=>[:reduce, 14],
  :INTERSECT=>[:reduce, 14],
  :SDIFFERENCE=>[:reduce, 14],
  :DIFFERENCE=>[:reduce, 14],
  :COLON=>[:reduce, 14],
  :LPAREN=>[:reduce, 14],
  :STRING=>[:reduce, 14],
  :LBRACK=>[:reduce, 14],
  :NUMBER=>[:reduce, 14],
  :CHARACTER=>[:reduce, 14],
  :RPAREN=>[:reduce, 14]},
 {:GREATER=>[:state, 67]},
 {:"$"=>[:reduce, 19],
  :STAR=>[:reduce, 19],
  :PLUS=>[:reduce, 19],
  :OPTIONAL=>[:reduce, 19],
  :LBRACE=>[:reduce, 19],
  :UNION=>[:reduce, 19],
  :INTERSECT=>[:reduce, 19],
  :SDIFFERENCE=>[:reduce, 19],
  :DIFFERENCE=>[:reduce, 19],
  :COLON=>[:reduce, 19],
  :LPAREN=>[:reduce, 19],
  :STRING=>[:reduce, 19],
  :LBRACK=>[:reduce, 19],
  :NUMBER=>[:reduce, 19],
  :CHARACTER=>[:reduce, 19],
  :RPAREN=>[:reduce, 19]}]
.freeze # >

# A list of all of the productions.  Only includes the left-hand side,
# the number of tokens on the right-hand side, and the block to call
# on reduction.
#
# @return [Array<Array<(Symbol, Numeric, Proc)>>]
PRODUCTIONS  = [[:$start, 2, proc { |_| _ }],
[:main, 1, proc { |_| compile_paren(_) }],
[:expression, 1, proc { |_|    [_]           }],
[:expression, 2, proc { |a, b| b.unshift(a)  }],
[:group, 2, proc { |a, b|    compile_modifier(b, a)     }],
[:group, 3, proc { |a, b, c| compile_binop(b, a, c)     }],
[:group, 2, proc { |a, b|    compile_transitional(b, a) }],
[:group, 1, proc { |_| _ }],
[:modifier, 1, proc { |_| _[0] }],
[:modifier, 1, proc { |_| _[0] }],
[:modifier, 1, proc { |_| _[0] }],
[:modifier, 3, proc { |_| _ }],
[:modifier, 4, proc { |_| _ }],
[:modifier, 4, proc { |_| _ }],
[:modifier, 5, proc { |_| _ }],
[:binop, 1, proc { |_| _[0] }],
[:binop, 1, proc { |_| _[0] }],
[:binop, 1, proc { |_| _[0] }],
[:binop, 1, proc { |_| _[0] }],
[:transitional, 6, proc { |_, _, a, b, c,_| [a, b, c]   }],
[:transitional, 5, proc { |_, _, a, b, _|   [a, nil, b] }],
[:"transitional.type", 1, proc { |_| _ }],
[:"transitional.type", 1, proc { |_| _ }],
[:"transitional.type", 1, proc { |_| _ }],
[:"transitional.type", 1, proc { |_| _ }],
[:value, 3, proc { |_, a, _| compile_paren(a)      }],
[:value, 1, proc { |_|       compile_string(_)     }],
[:value, 1, proc { |_|       compile_contain(_)    }],
[:value, 1, proc { |_|       compile_number(_)     }],
[:value, 1, proc { |_|       compile_identifier(_) }],
[:contain, 3, proc { |_, a, _| a }],
[:identifier, 2, proc { |a, b| b.unshift(a)             }],
[:chars, 1, proc { |_|    [_]                      }],
[:chars, 2, proc { |a, b| b.unshift(a)             }],
[:char, 1, proc { |_| _ }],
[:char, 1, proc { |_| _ }],
[:char, 1, proc { |_| _ }],
[:"contain.body", 2, proc { |a, b| b.unshift(a) }],
[:"contain.body", 1, proc { |_| _ }],
[:"contain.parts", 1, proc { |_|    [_]          }],
[:"contain.parts", 2, proc { |a, b| b.unshift(a) }],
[:"contain.part", 1, proc { |_| _ }],
[:"contain.part", 3, proc { |a, b, c| [:SET, a[1], c[1]] }],
[:"contain.part", 1, proc { |_| _ }],
[:"contain.char", 1, proc { |_| _ }],
[:"contain.char", 1, proc { |_| _ }],
[:"contain.char", 1, proc { |_| _ }]].freeze # >

# Runs the parser.
#
# @param input [Array<Object>] the input to run the parser over.
# @return [Object] the result of the accept.
def parse(input)
  stack = []
  stack.push([nil, 0])
  input = input.dup
  last  = nil

  until stack.empty? do
    peek_token = if input.empty?
      :"$"
    else
      type(input.first)
    end

    action = ACTION_TABLE[stack.last.last].fetch(peek_token)
    case action.first
    when :accept
      production = PRODUCTIONS[action.last]
      last       = stack.pop(production[1]).first.first
      stack.pop
    when :reduce
      production = PRODUCTIONS[action.last]
      removing   = stack.pop(production[1])
      value = instance_exec(*removing.map(&:first), &production[2])
      goto  = ACTION_TABLE[stack.last.last][production[0]]
      stack.push([value, goto.last])
    when :state
      stack.push([input.shift, action.last])
    else
      raise
    end
  end

  last
end


      def type(token)
        token[0].to_s.upcase.intern
      end
    end
  end
end
